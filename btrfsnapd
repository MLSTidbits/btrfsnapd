#!/bin/env bash

# btrfs-snapshot copyright (c) 2024 by <mschaecher78@gmail.com> Michael L. Schaecher - MIT License

# This script creates a btrfs snapshot of the root filesystem and deletes old snapshots helping
# keep data usage manageable.

# Log all output to syslog
function sysLog () { logger -t btrfs-snapshot "$@" ; }

function cleanUp () {

    while IFS= read -r m ; do
        if mountpoint -q "${m}" ; then
            umount "${m}" || { sysLog "Failed to unmount ${m}" ; exit 1 ; }
            rm -Rf "${m}" || { sysLog "Failed to remove temporary directory ${m}" ; exit 1 ; }
        fi
    done < <(mount | awk '$3 ~ /^\/tmp\// { print $3 }')

    test ! -d "${_snapshotsDir}" || rm -Rf "${_snapshotsDir}"

    sysLog "Cleaning up temporary directories"
}

function mountTmp () {

    # Find the dev path of the btrfs filesystem
    local fsPath
    fsPath="$(lsblk -o fstype,path | awk '$1 == "btrfs" {print $2}')"

    test -n "${fsPath}" || { sysLog "No btrfs filesystem found" ; exit 1 ; }

    mountedTmp="$(mktemp -d /tmp/tmp.XXXXXX)" || {
        sysLog "Failed to create temporary directory" ; exit 1
    }

    # Mount the btrfs filesystem to the temporary directory
    mount "${fsPath}" "${mountedTmp}" || {
        sysLog "Failed to mount btrfs filesystem ${fsPath} to ${mountedTmp}" ; exit 1
    }

}

function rootRequired () {
    (( $(id -u) == 0 )) || { sysLog "This script must be run as root" ; exit 1 ; }
}

function takeSnapshot () {

    shift

     [[ "$1" == "-h" || "$1" == "--help" ]] && { echo "$_createHelpInfo" ; exit 0 ; }

    # Check if the script is run with root privileges
    rootRequired ; mountTmp

    local snapshotOptions confirm sourceDir targetDir snapshotOut

    snapshotOptions="su snapshot"

    targetDir="$mountedTmp/${_snapshotsDir}" ; sourceDir="$mountedTmp/@"

    # Get the temporary directory that the filesystem is mounted to
    if ! test -d "${_snapshotsDir}" ; then
        sysLog "Snapshot directory ${_snapshotsDir} does not exist, creating it"
        mkdir -p "${_snapshotsDir}" || {
            sysLog "Failed to create snapshot directory ${_snapshotsDir}" ; exit 1
        }
    fi

    while [[ $# -gt 0 ]] ; do case "${1}" in
        -r|--read-only              ) snapshotOptions="${snapshotOptions} -r" ; shift  ;;
        -y|--yes                    ) confirm="yes"                           ; shift  ;;
        -s|--source                 )
            # Set the source directory from which to create the snapshot.
            case "${2}" in
                root                ) sourceDir="$mountedTmp/@"                        ;;
                home                ) sourceDir="$mountedTmp/@home"                    ;;
                logs                ) sourceDir="$mountedTmp/@log"                     ;;
                *                   ) sysLog "Invalid source directory: ${2}" ; exit 1 ;;
            esac
            shift 2
        ;;
        -t|--target                 )
            # Check if a flag is next instead of a directory
            if [[ "${2}" == -* ]] ; then
                targetDir="$mountedTmp/${_snapshotsDir}"
            else
                targetDir="$mountedTmp/${2}"
            fi
            shift 2
        ;;
        -w|--writeable              )
            # Verify that the target directory exists
            test -d "${2}" || { sysLog "Snapshot target directory ${2} does not exist" ; exit 1 ; }

            btrfs property set "${2}" ro false || {
                sysLog "Failed to set writeable property on ${2}" ; exit 1
            }

            # Don't want to continue with the snapshot with this flag for now.
            sysLog "${2} set to writeable, skipping snapshot creation" ; exit 0
        ;;
        *) break ;;
    esac ; done

    # Verify that the target directory exists
    test -d "${targetDir}" || { sysLog "Snapshot target directory ${targetDir} does not exist" ; exit 1 ; }

    snapshotOut="${targetDir}/${_distroName}_${_snapshotType}_$(date +%Y%m%d+%H%M)"

    if test "$confirm" != "yes" ; then

        # Prompt for confirmation before creating the snapshot
        read -rp "Are you sure you want to create a snapshot of ${sourceDir} in ${snapshotOut}? [y/N] " choice
        [[ "$choice" =~ ^[yY](es)?$ ]] || { sysLog "Snapshot creation cancelled" ; exit 0 ; }

    fi

    # shellcheck disable=SC2086
    btrfs ${snapshotOptions} ${sourceDir} ${snapshotOut} || {
        sysLog "Failed to create snapshot of ${sourceDir} in ${targetDir}" ; exit 1
    }

    sysLog "Snapshot of ${sourceDir} created in ${targetDir}"

    cleanUp

}

function deleteSnapshot () {

    btrfs su delete "${1}" || { sysLog "Failed to delete snapshot ${1}" ; exit 1 ; }
    sysLog "Snapshot ${1} deleted successfully"

}

function deleteOldestSnapshot () {

    local oldSnapshots snapshotList targetDir

    targetDir="${mountedTmp}/${_snapshotsDir}"

    # Delete snapshots exceeding the total to keep
    while true ; do

        oldSnapshots="$(btrfs su list -o --sort=ogen "${targetDir}" | awk -F'/' 'NR==1 {print $2}')"

        # Using the find command is better then ls, however the one less snapshot is kept.
        # Need to add 1 to the TOTAL_KEEP variable to keep the correct number of snapshots.
        count=$((_totalCount + 1))

        snapshotList="$(find "${targetDir}" -maxdepth 1 -type d | wc -l)"

        if test "${snapshotList}" -gt "${count}" ; then
            deleteSnapshot "${targetDir}/${oldSnapshots}"
        else
            break
        fi

    done

}

function deleteSnapshotList () {

    case "${1}" in
        -h|--help                 ) echo "${_deleteHelpInfo}"                 ; exit 0 ;;
    esac

    # Check if the script is run with root privileges
    rootRequired ; mountTmp

    local snapshotsList snapshotsName targetDir

    shift

    snapshotsList=() ; targetDir="${mountedTmp}/${_snapshotsDir}"
    oldest="no" ; confirm="no"

    while true ; do case "${1}" in
        -o|--oldest               ) oldest="yes"                              ; shift  ;;
        -y|--yes                  ) confirm="yes"                             ; shift  ;;
        -p|--purge                )
            # Check if the target snapshot directory exists
            test -d "${targetDir}/${2}" || {
                sysLog "Snapshot target directory ${targetDir}/${2} does not exist" ; exit 1
            } ; purgeSnapshot="${targetDir}/${2}"

            shift 2
        ;;
        -l|--list                 )
            while IFS= read -r -d $'\0' snap; do
                snapshotsName=$(basename "$snap") && snapshotsList+=("$snapshotsName")
            done < <(find "$targetDir" -mindepth 1 -maxdepth 1 -type d -print0 | sort -z)

            echo "Please select a snapshot to delete: (ctrl+c to cancel)"
            echo ""

            select snap in "${snapshotsList[@]}" ; do
                test -z "${snap}" || { selectedSnapshot="$snap" ; break ; }
            done
            shift
        ;;
        *) break ;;
    esac ; done

    if test "${confirm}" != "yes" ; then
        # Prompt for confirmation before deleting the snapshot
        if test "${oldest}" != "yes" ; then
            read -rp "Delete the oldest snapshots? [y/N] " choice
        elif test -n "${purgeSnapshot}" ; then
            read -rp "Purge snapshot ${purgeSnapshot}? [y/N] " choice
        else
            read -rp "Delete snapshot ${selectedSnapshot} in ${targetDir}? [y/N] " choice
        fi
        case "${choice}" in
            [yY][eE][sS]|[yY]       ) ;;
            *                       ) sysLog "Snapshot deletion cancelled"    ; exit 0 ;;
        esac
    fi

    # Verify that the target directory exists
    test -d "${targetDir}" || { sysLog "Snapshot target directory ${targetDir} does not exist" ; exit 1 ; }

    test "${oldest}" != "yes" || deleteOldestSnapshot
    test "${oldest}" != "no" || deleteSnapshot "${targetDir}/${selectedSnapshot}"

    cleanUp

}

function restoreSnapshot () {

    shift

    local tmpDir fsPath snapshotsList targetDir

    # Get the dev path of the btrfs filesystem
    fsPath="$(lsblk -o fstype,path | awk '$1 == "btrfs" {print $2}')"

    case "${1}" in
        -h|--help                 ) echo "${_restoreHelpInfo}"                ; exit 0 ;;
    esac

    # Check if the script is run with root privileges
    rootRequired

    tmpDir="$(mktemp -d)"

    mount "$fsPath" "$tmpDir" || { sysLog "Failed to mount btrfs filesystem $fsPath" ; exit 1 ; }

    _snapshotsDir="$tmpDir/@snapshots"

    while true ; do case "${1}" in
        -l|--list                 )
            # List all available snapshots in the snapshot subvolume
            snapshotsList=() ; targetDir="$_snapshotsDir"
            while IFS= read -r -d $'\0' snap; do
                snapshotsName=$(basename "$snap") && snapshotsList+=("$snapshotsName")
            done < <(find "$targetDir" -mindepth 1 -maxdepth 1 -type d -print0 | sort -z)

            test "${#snapshotsList[@]}" -eq 0 && { sysLog "No snapshots found in ${targetDir}" ; exit 1 ; }

            echo "Please select a snapshot to restore from: (ctrl+c to cancel)"
            echo ""

            select snap in "${snapshotsList[@]}" ; do
                test -z "${snap}" || { selectedSnapshot="$snap" ; break ; }
            done
            shift
        ;;
        -y|--yes                  ) confirm="yes"                             ; shift  ;;
        -s|--source               )
            # Set the source directory to restore
            case "${2}" in
                root                ) sourceDir="@";;
                home                ) sourceDir="@home";;
                logs                ) sourceDir="@log";;
                *                   ) sysLog "Invalid source directory: ${2}" ; exit 1 ;;
            esac
            shift 2
        ;;
        *) break ;;
    esac ; done

    if test "${confirm}" != "yes" ; then
        # Prompt for confirmation before restoring the snapshot
        read -rp "Are you sure you want to restore ${sourceDir} from ${selectedSnapshot}? [y/N] " choice
        case "${choice}" in
            [yY][eE][sS]|[yY]       ) ;;
            *                       ) sysLog "Snapshot restoration cancelled" ; exit 0 ;;
        esac
    fi

    # Delete source target
    btrfs su delete "${tmpDir}/${sourceDir}" || {
        sysLog "Failed to delete source directory ${tmpDir}/${sourceDir}" ; exit 1
    }

    # Restore the snapshot
    btrfs su snapshot "$tmpDir/@snapshots/${selectedSnapshot}" "${tmpDir}/${sourceDir}" || {
        sysLog "Failed to restore snapshot ${selectedSnapshot} to ${tmpDir}/${sourceDir}" ; exit 1
    }

    sysLog "Snapshot ${selectedSnapshot} restored to ${tmpDir}/${sourceDir}"

}

function listSnapshots () {

    rootRequired ; mountTmp

    local listSnapshotsDir

    listSnapshotsDir="${mountedTmp}/${_snapshotsDir}"

        # List all snapshots in the snapshot directory
    if test -d "$listSnapshotsDir" ; then
        echo "${_versionInfo}"
        echo ""
        echo "Available snapshots in ${_snapshotsDir} subvolume:"
        echo "--------------------------------------------------"
        echo ""

        find "${listSnapshotsDir}" -mindepth 1 -maxdepth 1 -type d | sort | while read -r snap ; do
            basename "${snap}"
        done
    else
        echo "No snapshots found in ${_snapshotsDir}"
    fi

    cleanUp
}

set -eo pipefail

# shellcheck disable=SC1091
source /etc/btrfsnapd.conf || { sysLog "Configuration file /etc/btrfsnapd.conf not found" ; exit 1 ; }

test ! -f /etc/os-release || source /etc/os-release

_appName="btrfsnapd"
_appVersion="$(cat /usr/share/doc/btrfsnapd/version || echo "unknown")"

# Default values for general snapshot for the root filesystem
_distroName="${DISTRO_NAME:-$NAME}"
_snapshotType="${SNAPSHOT_TYPE:-root}"

_snapshotsDir="${SNAPSHOT_DIR:-@snapshots}"
_setDate="${SET_DATE:-true}"
_readOnly="${READ_ONLY:-false}"

# How many snapshots to keep. This should be keep low to avoid using too much disk space.
_totalCount="${TOTAL_COUNT:-7}"

_licenseInfo="$(cat << EOF
$_appName - Copyright (c) 2024 by Michael L. Schaecher <MichaelLeeSchaecher@gmail.com> under the terms
of the GPLv3 License or later.
EOF
)"

_versionInfo="$(cat << EOF
${_appName} [ version ${_appVersion} ] - ${_distroName} ${VERSION}
EOF
)"

_helpInfo="$(cat << EOF
${_versionInfo}

Usage: ${_appName} [options] <flags> arg...

Options:
    create                      Create a new snapshot based on configured settings.
    delete                      Delete a snapshot based on configured settings
    restore                     Restore a subvolume to a previous state
    list                        List all snapshots in the snapshot directory.
    help                        Show this help message.
    version                     Show version information.

Flags:
    -h, --help                  Show help information for options: (\`create\`, \`delete\`, \`restore\`)

${_licenseInfo}
EOF
)"

_createHelpInfo="$(cat << EOF
${_versionInfo}

Usage: ${_appName} create <flags> arg...

Options:
    create                      Create a new snapshot based on configured settings.

Flag:
    -r, --read-only             Create a read-only snapshot: This will not allow any changes to the snapshot
                                after creation.
    -y, --yes                   Skip the confirmation prompt before creating the snapshot.
    -s, --source <source>       Specify the source for the snapshot: [\`root\`, \`home\`, or \`logs\`].
    -t, --target <target>       Specify the target location for the snapshot: [Default is \`/.snapshots\`].
    -w, --writeable             Convert a given snapshot to a writeable state: This allows changes to be made
                                to the snapshot after creation.
    -h, --help                  Show help information for creating a snapshot.

${_licenseInfo}
EOF
)"

_deleteHelpInfo="$(cat << EOF
${_versionInfo}

Usage: ${_appName} delete <flags> arg...

Options:
    delete                     Delete a snapshot based on configured settings.

Flags:
    -o, --oldest               Delete the oldest snapshot in the snapshot directory.
    -l, --list                 List all available snapshots in the snapshot directory.
    -y, --yes                  Skip the confirmation prompt before deleting the snapshot.
    -h, --help                 Show help information for deleting a snapshot.

${_licenseInfo}
EOF
)"

_restoreHelpInfo="$(cat << EOF
${_versionInfo}

Usage: ${_appName} restore <flags> arg...

Options:
    restore                   Restore a subvolume to a previous state.

Flags:
    -l, --list                List all available snapshots in the snapshot directory.
    -y, --yes                 Skip the confirmation prompt before restoring the snapshot.
    -s, --source <source>     Specify the source to be restored: [\`root\`, \`home\`, or \`logs\`].
    -h, --help                Show help information for restoring a snapshot.

${_licenseInfo}
EOF
)"

trap "cleanUp" SIGINT

case "${1}" in
    create              ) takeSnapshot "${@}"                    ;;
    delete              ) deleteSnapshotList "${@}"              ;;
    restore             ) restoreSnapshot "${@}"                 ;;
    list                ) listSnapshots                          ;;
    help                ) echo "${_helpInfo}"           ; exit 0 ;;
    version             ) echo "${_versionInfo}"        ; exit 0 ;;
    *                   ) echo "Invalid argument: ${1}" ; exit 1 ;;
esac

echo "done" ; exit 0
