#!/usr/bin/env bash

# btrfsnapd - A BTRFS snapshot management script
# Copyright (c) 2024 by Michael Schaecher <MichaelLeeSchaecher@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC2317
function sign_handler () {

    local _signal

    _signal="${1:-SIGINT}"

    case "${_signal}" in
        SIGINT|SIGTERM|SIGQUIT )
            event_log "warning" "Received signal ${_signal}, cleaning up and exiting" ;;
        EXIT                   ) event_log "info" "Exiting script" ; exit 0           ;;
        *                      )
            event_log "error" "Unknown signal ${_signal} received, exiting" ; exit 1
        ;;
    esac

    clean_up
}

# Log all output to event_log
function event_log () {

    local _eventType _eventMessage

    _eventType="${1:-info}"
    _eventMessage="${2}"

    case "${_eventType}" in
        info|warning|error      ) logger -t btrfsnapd -p user."${_eventType}" "${_eventMessage}" ;;
        *                       ) logger -t btrfsnapd -p user.info "${_eventMessage}"            ;;
    esac

}

function clean_up () {

    mount | awk '$3 ~ /^\/tmp\// { print $3 }' | while read -r _tmpDir ; do
        if mountpoint -q "$_tmpDir" ; then
            umount "$_tmpDir" || {
            event_log "error" "Failed to unmount temporary directory $_tmpDir" ; exit 1 ; }
        fi
        rm -Rf "$_tmpDir" || {
        event_log "error" "Failed to remove temporary directory $_tmpDir" ; exit 1 ; }
    done

    event_log "info" "Cleaning up temporary directories"
}

function check_root () {
    (( $(id -u) == 0 )) || { echo "This script must be run as root" ; exit 1 ; }
}

function take_snapshot () {

    # Check if the script is run with root privileges
    check_root

    local _snapshotOptions _confirm _sourceDir _targetDir _snapshotOut

    _snapshotOptions=""

    _targetDir="$_snapshotsDir"
    _sourceDir="/"

    shift

     [[ "$1" == "-h" || "$1" == "--help" ]] && { echo "$_createHelpInfo" ; exit 0 ; }

    if ! test -d "$_snapshotsDir" ; then
        event_log "warning" "Snapshot subvolume $_snapshotsDir does not exist, creating it"
        # Check if there is a subvolume for snapshots or snapshot, if not create it
        if ! btrfs subvolume list / | grep -q "@snapshots" ; then
            btrfs subvolume create "$_snapshotsDir" || {
            event_log "error" "Failed to create snapshot subvolume $_snapshotsDir" ; exit 1 ; }
        fi
        event_log "info" "Created snapshot subvolume $_snapshotsDir"
    fi

    while [[ $# -gt 0 ]] ; do case "${1}" in
        -r|--read-only              ) _snapshotOptions="$_snapshotOptions -r "   ; shift  ;;
        -y|--yes                    ) _confirm="yes"                             ; shift  ;;
        -s|--source                 )
            # Set the source directory from which to create the snapshot.
            case "${2}" in
                root                ) _sourceDir="/"                                      ;;
                home                ) _sourceDir="/home"                                  ;;
                logs                ) _sourceDir="/log"                                   ;;
                *                   ) event_log "Invalid source directory: ${2}" ; exit 1 ;;
            esac
            shift 2
        ;;
        -t|--target                 )
            # Check if a flag is next instead of a directory
            if [[ "${2}" == -* ]] ; then
                _targetDir="$_snapshotsDir"
            else
                _targetDir="/${2}"
            fi
            shift 2
        ;;
        -w|--writeable              )
            # Verify that the target directory exists
            test -d "${2}" || { event_log "error" "Snapshot target directory ${2} does not exist" ; exit 1 ; }

            btrfs property set "${2}" ro false || {
            event_log "error" "Failed to set writeable property on ${2}" ; exit 1 ; }

            # Don't want to continue with the snapshot with this flag for now.
            event_log "error" "${2} set to writeable, skipping snapshot creation" ; exit 0
        ;;
        *) break ;;
    esac ; done

    # Verify that the target directory exists
    test -d "$_targetDir" ||
    { event_log "error" "Snapshot target directory $_targetDir does not exist" ; exit 1 ; }

    _snapshotOut="$_targetDir/${_distroName}_${_snapshotType}_$(date +%Y%m%d+%H%M)"

    if test "$_confirm" != "yes" ; then

        # Prompt for _confirmation before creating the snapshot
        read -rp "Are you sure you want to create a snapshot of ${_sourceDir} in ${_snapshotOut}? [y/N] " choice
        [[ "$choice" =~ ^[yY](es)?$ ]] || { echo "Snapshot creation cancelled" ; exit 0 ; }

    fi

    # shellcheck disable=SC2086
    btrfs su snapshot ${_snapshotOptions} ${_sourceDir} ${_snapshotOut} || {
    event_log "error" "Failed to create snapshot of ${_sourceDir} in $_targetDir" ; exit 1 ; }

    event_log "info" "Snapshot of ${_sourceDir} created in $_targetDir"

    clean_up

}

function run_cycle_delete () {

    event_log "info" "Automatically deleting oldest snapshots in $_targetDir"

    while true ; do

        _oldSnapshots="$(btrfs su list -o --sort=ogen "$_targetDir" | awk -F'/' 'NR==1 {print $2}')"

        # Using the find command is better then ls, however the one less snapshot is kept.
        # Need to add 1 to the TOTAL_KEEP variable to keep the correct number of snapshots.
        count=$((_totalCount + 1))

        _snapshotList="$(find "$_targetDir" -maxdepth 1 -type d | wc -l)"

        if test "${_snapshotList}" -gt "${count}" ; then
            btrfs su delete "$_targetDir/${_oldSnapshots}" ||
            { event_log "error" "Failed deleting snapshot $_targetDir/${_oldSnapshots}" ; exit 1 ; }
        else
            event_log "info" "No snapshots to delete, keeping ${_totalCount} snapshots in $_targetDir"
            break
        fi

    done

}

function delete_snapshot () {

    local _snapshotsList _snapshotsName _oldSnapshots _snapshotList

    _snapshotsList=()
    _targetDir="$_snapshotsDir"
    _oldest="no"
    _confirm="no"

    shift

    [[ "$1" == "-h" || "$1" == "--help" ]] && { echo "${_deleteHelpInfo}" ; exit 0 ; }

    # Check if the script is run with root privileges
    check_root

    # shellcheck disable=SC2222
    # shellcheck disable=SC2221
    while [ $# -gt 0 ] ; do case "$1" in
        -o|--oldest             ) _oldest="yes"                  ; shift ;;
        -y|--yes                ) _confirm="yes"                 ; shift ;;
        -p|--purge              )
            [ -n "$2" ] || test -d "$_targetDir/${2}" ||
            { event_log "error" "Purge snapshot directory/name is not valid: ${2}" ; exit 1 ; }
            _purgeSnapshot="$_targetDir/${2}"
            shift 2
        ;;
        -l|--list               )
            while IFS= read -r -d $'\0' snap; do
                _snapshotsName=$(basename "$snap")
                _snapshotsList+=("$_snapshotsName")
            done < <(find "$_targetDir" -mindepth 1 -maxdepth 1 -type d -print0 | sort -z)

            echo "Please select a snapshot to delete: (ctrl+c to cancel)"
            echo ""
            select snap in "${_snapshotsList[@]}"; do
                if [ -n "$snap" ]; then
                    _selectedSnapshot="$snap"
                    break
                else
                    echo "Invalid selection. Try again."
                fi
            done
            shift
            ;;
        -*|--*                  ) echo "Invalid option: $1" >&2 ; exit 1 ;;
        *                       ) shift                                  ;;
    esac ; done


    if [ -n "$_selectedSnapshot" ] && [ "$_confirm" = "no" ] ; then
        read -rp "Delete snapshot $_selectedSnapshot in $_targetDir? [y/N] " choice
        _oldSnapshots="$_selectedSnapshot"
        case "${choice}" in
            [yY][eE][sS]|[yY]) btrfs su delete "$_targetDir/${_oldSnapshots}"        ;;
            [nN][oO]|[nN]    ) echo "Snapshot deletion cancelled"             ; exit 0 ;;
            *                ) echo "Invalid choice, please enter 'y' or 'n'" ; exit 1 ;;
        esac
    elif [ -n "$_selectedSnapshot" ] && [ "$_confirm" = "yes" ] ; then
        btrfs su delete "$_targetDir/${_selectedSnapshot}" || {
        event_log "error" "Failed to delete snapshot ${_selectedSnapshot} in $_targetDir" ; exit 1 ; }
    fi

    # Delete snapshots exceeding the total to keep
    if [ "$_oldest" = "yes" ] && [ "$_confirm" = "yes" ] ; then
        run_cycle_delete
    elif [ "$_oldest" = "yes" ] && [ "$_confirm" = "no" ] ; then
        read -rp "Delete the oldest snapshot in $_targetDir? [y/N] " choice
        case "${choice}" in
            [yY][eE][sS]|[yY]) run_cycle_delete ;;
            [nN][oO]|[nN]    ) echo "Oldest snapshot deletion cancelled" ; exit 0 ;;
            *                ) echo "Invalid choice, please enter 'y' or 'n'" ; exit 1 ;;
        esac
    fi

    if [ -n "$_purgeSnapshot" ] && [ "$_confirm" = "yes" ] ; then
        btrfs su delete "${_purgeSnapshot}" || {
        event_log "error" "Failed to delete snapshot ${_purgeSnapshot}" ; exit 1 ; }
    elif [ -n "$_purgeSnapshot" ] && [ "$_confirm" = "no" ] ; then
        read -rp "Purge snapshot $_purgeSnapshot? [y/N] " choice
        case "${choice}" in
            [yY][eE][sS]|[yY]) btrfs su delete "${_purgeSnapshot}"                     ;;
            [nN][oO]|[nN]    ) echo "Snapshot purge cancelled"                ; exit 0 ;;
            *                ) echo "Invalid choice, please enter 'y' or 'n'" ; exit 1 ;;
        esac
    fi

    clean_up

}

function restore_snapshot () {

    shift

    local _fsPath _snapshotsList _targetDir _sourceDir
    local _selectedSnapshot _snapshotsName _confirm

    _confirm="no"

    [[ "$1" == "-h" || "$1" == "--help" ]] && { echo "${_restoreHelpInfo}" ; exit 0 ; }

    # Check if the script is run with root privileges
    check_root

    _tmpDir="$(mktemp -d)"

    # Get the dev path of the btrfs filesystem
    _fsPath="$(lsblk -o fstype,path | awk '$1 == "btrfs" {print $2}')"

    mount "$_fsPath" "$_tmpDir" || { event_log "error" "Failed to mount btrfs filesystem $_fsPath" ; exit 1 ; }

    _snapshotsDir="$_tmpDir/@snapshots"
    _sourceDir="$_tmpDir/@"

    # shellcheck disable=SC2222
    # shellcheck disable=SC2221
    while [ $# -gt 0 ] ; do case "$1" in
        -l|--list               )
            _snapshotsList=()
            _targetDir="$_snapshotsDir"
            while IFS= read -r -d $'\0' snap; do
                _snapshotsName=$(basename "$snap") && _snapshotsList+=("$_snapshotsName")
            done < <(find "$_targetDir" -mindepth 1 -maxdepth 1 -type d -print0 | sort -z)

            if [ ${#_snapshotsList[@]} -eq 0 ]; then
                event_log "error" "No snapshots found in $_targetDir" ; exit 1
            fi

            echo "Please select a snapshot to restore from: (ctrl+c to cancel)"
            echo ""

            select snap in "${_snapshotsList[@]}"; do
                if [ -n "$snap" ]; then
                    _selectedSnapshot="$snap"
                    break
                else
                    echo "Invalid selection. Try again."
                fi
            done
            shift
            ;;
        -y|--yes                )
            _confirm="yes"
            shift
            ;;
        -s|--source             )
            if [ -z "$2" ]; then
                echo "Error: --source requires a value (root, home, logs)." >&2
                exit 1
            fi
            case "$2" in
                root) _sourceDir="$_tmpDir/@" ;;
                home) _sourceDir="$_tmpDir/@home" ;;
                logs) _sourceDir="$_tmpDir/@log" ;;
                *) echo "Invalid source directory: $2" ; exit 1 ;;
            esac
            shift 2
            ;;
        -*|--*                  )
            echo "Invalid option: $1" >&2
            exit 1
            ;;
        *                       ) shift ;;
        esac ; done

    if [ "$_confirm" != "yes" ]; then
        read -rp "Are you sure you want to restore ${_sourceDir} from $_selectedSnapshot? [y/N] " _choice
        case "$_choice" in
            [yY][eE][sS]|[yY]) ;;
            [nN][oO]|[nN]) echo "Snapshot restoration cancelled" ; exit 0 ;;
            *) echo "Invalid choice, please enter 'y' or 'n'" ; exit 1 ;;
        esac
    fi

    if btrfs su delete "${_sourceDir}" && \
       btrfs su snapshot "$_snapshotsDir/$_selectedSnapshot" "${_sourceDir}"; then
        event_log "info" "Snapshot $_selectedSnapshot restored to ${_sourceDir}"
    else
        event_log "error" "Failed to restore snapshot $_selectedSnapshot to ${_sourceDir}" ; exit 1
    fi

    umount "$_tmpDir" || {
        event_log "error" "Failed to unmount temporary directory $_tmpDir" ; exit 1 ;
    }

    clean_up
}

function list_snapshots () {

    check_root

    local _listSnapshotsDir

    _listSnapshotsDir="$_snapshotsDir"

        # List all snapshots in the snapshot directory
    if test -d "$_listSnapshotsDir" ; then
        echo "$_versionInfo"
        echo ""
        echo "Name              Source           Date"
        echo "---------------------------------------------------"
        echo ""

        find "$_listSnapshotsDir" -mindepth 1 -maxdepth 1 -type d | sort | while read -r snap ; do
            _name="$(basename "$snap" | awk -F'_' '{print $1}')"
            _source="$(basename "$snap" | awk -F'_' '{print $2}')"
            _date="$(basename "$snap" | awk -F'_' '{print $3}' | sed 's/+/ /g')"
            echo "$_name           $_source             $_date"
        done
    else
        echo "No snapshots found in $_snapshotsDir"
    fi
}

set -eo pipefail

# shellcheck disable=SC1091
source /etc/btrfsnapd.conf 2> /dev/null || {
    echo "Failed to source configuration file /etc/btrfsnapd.conf" >&2
    exit 1
}

# shellcheck disable=SC1091
test ! -f /etc/os-release || source /etc/os-release

_appName="btrfsnapd"
_appVersion="$(cat /usr/share/doc/btrfsnapd/version 2> /dev/null || echo "unknown")"

# Default values for general snapshot for the root filesystem
_distroName="${DISTRO_NAME:-$NAME}"
# deal with the case where NAME has spaces
if echo "$_distroName" | grep -q ' ' ; then
    _distroName="$(echo "$_distroName" | tr -d '[:space:]')"
fi

_snapshotType="${SNAPSHOT_TYPE:-root}"

_snapshotsDir="${SNAPSHOT_DIR:-/.snapshots}"
_setDate="${SET_DATE:-true}"
_readOnly="${READ_ONLY:-false}"

# How many snapshots to keep. This should be keep low to avoid using too much disk space.
_totalCount="${TOTAL_COUNT:-7}"

# Trap errors and log them
trap sign_handler SIGINT SIGTERM SIGQUIT EXIT

_licenseInfo="$(cat << EOF
$_appName - Copyright (c) 2024 by Michael L. Schaecher <MichaelLeeSchaecher@gmail.com> under the terms
of the GPLv3 License or later.
EOF
)"

_versionInfo="$(cat << EOF
${_appName} [ version ${_appVersion} ] - $_distroName ${VERSION}
EOF
)"

_helpInfo="$(cat << EOF
$_versionInfo

Usage: ${_appName} [options] <flags> arg...

Options:
    create                      Create a new snapshot based on configured settings.
    delete                      Delete a snapshot based on configured settings
    restore                     Restore a subvolume to a previous state
    list                        List all snapshots in the snapshot directory.
    help                        Show this help message.
    version                     Show version information.

Flags:
    -h, --help                  Show help information for options: (\`create\`, \`delete\`, \`restore\`)

${_licenseInfo}
EOF
)"

_createHelpInfo="$(cat << EOF
$_versionInfo

Usage: ${_appName} create <flags> arg...

Options:
    create                      Create a new snapshot based on configured settings.

Flag:
    -r, --read-only             Create a read-only snapshot: This will not allow any changes to the snapshot
                                after creation.
    -y, --yes                   Skip the _confirmation prompt before creating the snapshot.
    -s, --source <source>       Specify the source for the snapshot: [\`root\`, \`home\`, or \`logs\`].
    -t, --target <target>       Specify the target location for the snapshot: [Default is \`/.snapshots\`].
    -w, --writeable             Convert a given snapshot to a writeable state: This allows changes to be made
                                to the snapshot after creation.
    -h, --help                  Show help information for creating a snapshot.

${_licenseInfo}
EOF
)"

_deleteHelpInfo="$(cat << EOF
$_versionInfo

Usage: ${_appName} delete <flags> arg...

Options:
    delete                     Delete a snapshot based on configured settings.

Flags:
    -o, --oldest               Delete the oldest snapshot in the snapshot directory.
    -l, --list                 List all available snapshots in the snapshot directory.
    -y, --yes                  Skip the _confirmation prompt before deleting the snapshot.
    -h, --help                 Show help information for deleting a snapshot.

${_licenseInfo}
EOF
)"

_restoreHelpInfo="$(cat << EOF
$_versionInfo

Usage: ${_appName} restore <flags> arg...

Options:
    restore                   Restore a subvolume to a previous state.

Flags:
    -l, --list                List all available snapshots in the snapshot directory.
    -y, --yes                 Skip the _confirmation prompt before restoring the snapshot.
    -s, --source <source>     Specify the source to be restored: [\`root\`, \`home\`, or \`logs\`].
    -h, --help                Show help information for restoring a snapshot.

${_licenseInfo}
EOF
)"

trap "clean_up" SIGINT

case "${1}" in
    create              ) take_snapshot "${@}"                   ;;
    delete              ) delete_snapshot "${@}"                 ;;
    restore             ) restore_snapshot "${@}"                ;;
    cleanup             ) clean_up                               ;;
    list                ) list_snapshots                         ;;
    help                ) echo "${_helpInfo}"           ; exit 0 ;;
    version             ) echo "$_versionInfo"          ; exit 0 ;;
    *                   ) echo "Invalid argument: ${1}" ; exit 1 ;;
esac

exit 0
